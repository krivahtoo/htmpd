#!/bin/env python
import sys

header = """

#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <sys/types.h>

#include "server.h"

static const struct embedded_file embedded_files[] = {
"""

footer = """  {NULL, NULL, NULL, 0}
};

const struct embedded_file *find_embedded_file(const char *name) {
  const struct embedded_file *p;
  for (p = embedded_files; p->name != NULL; p++)
    if (!strcmp(p->name, name))
      return p;
  return NULL;
}
"""

def get_mime_type(filename):
    import mimetypes
    return mimetypes.guess_type(filename)[0] or 'text/plain'

def usage():
    print("Usage: %s <output> <file1> [file2, ...]" % sys.argv[0])
    sys.exit(1)

def main():
    if len(sys.argv) < 3:
        usage()
    with open(sys.argv[1], "wb") as of:
        files = []
        of.write(b'/*  This file is automatically generated by %s. Do not edit manually! */\n\n' % sys.argv[0].encode('utf-8'))
        for i, filename in enumerate(sys.argv[2:]):
            with open(filename, 'rb') as f:
                data = f.read()
                mime_type = get_mime_type(filename)
                of.write(b'/* %s (%d bytes) */' % (filename.encode('utf-8'), len(data)))
                of.write(b'\n')
                of.write(b'static const unsigned char f%d[] = {\n' % i)
                for i in range(0, len(data), 16):
                    of.write(b'  ')
                    for j in range(i, min(i+16, len(data))):
                        of.write(b'%#04x, ' % data[j])
                    if i+16 < len(data):
                        of.write(b'\n')
                    else:
                        # Append zero byte at the end, to make text files appear in memory
                        # as nul-terminated strings.
                        of.write(b'0x00\n};\n\n')
                files.append((filename, data, mime_type))
        of.write(header.encode('utf-8'))
        for i, (filename, data, mime_type) in enumerate(files):
            of.write(b'  {\"/%s\", f%d, \"%s\", sizeof(f%d) - 1},\n' % (filename.encode('utf-8'), i, mime_type.encode('utf-8'), i))
        of.write(footer.encode('utf-8'))

if __name__ == '__main__':
    main()
    print("Created %s" % sys.argv[1])

